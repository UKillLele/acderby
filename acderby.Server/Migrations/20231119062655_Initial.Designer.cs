// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using acderby.Server.Data;

#nullable disable

namespace acderby.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231119062655_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonTeam", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("PersonTeam");
                });

            modelBuilder.Entity("acderby.Server.Models.Bout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwayTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwayTeamMVPBlockerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwayTeamMVPJammerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HomeTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HomeTeamMVPBlockerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HomeTeamMVPJammerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("AwayTeamMVPBlockerId");

                    b.HasIndex("AwayTeamMVPJammerId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("HomeTeamMVPBlockerId");

                    b.HasIndex("HomeTeamMVPJammerId");

                    b.ToTable("Bouts");
                });

            modelBuilder.Entity("acderby.Server.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("acderby.Server.Models.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("acderby.Server.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaptainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoCaptainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoachIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonLosses")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonWins")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("PersonTeam", b =>
                {
                    b.HasOne("acderby.Server.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("acderby.Server.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("acderby.Server.Models.Bout", b =>
                {
                    b.HasOne("acderby.Server.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("acderby.Server.Models.Person", "AwayTeamMVPBlocker")
                        .WithMany()
                        .HasForeignKey("AwayTeamMVPBlockerId");

                    b.HasOne("acderby.Server.Models.Person", "AwayTeamMVPJammer")
                        .WithMany()
                        .HasForeignKey("AwayTeamMVPJammerId");

                    b.HasOne("acderby.Server.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("acderby.Server.Models.Person", "HomeTeamMVPBlocker")
                        .WithMany()
                        .HasForeignKey("HomeTeamMVPBlockerId");

                    b.HasOne("acderby.Server.Models.Person", "HomeTeamMVPJammer")
                        .WithMany()
                        .HasForeignKey("HomeTeamMVPJammerId");

                    b.Navigation("AwayTeam");

                    b.Navigation("AwayTeamMVPBlocker");

                    b.Navigation("AwayTeamMVPJammer");

                    b.Navigation("HomeTeam");

                    b.Navigation("HomeTeamMVPBlocker");

                    b.Navigation("HomeTeamMVPJammer");
                });
#pragma warning restore 612, 618
        }
    }
}
